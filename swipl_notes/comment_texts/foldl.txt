https://eu.swi-prolog.org/pldoc/doc_for?object=foldl/4

## Example (aka don't fear the foldl)

Goal is a closure or predicate taking three additional arguments: The current "list element", the current "folded value",  and the variable to be instantiated to the next "folded value" after Goal has done its computation. 

==
Goal(Element,CurFold,NextFold)
==

In the end, the last value of `NextFold` will be in `V` (or `Out`): 

You can use `library(yall)` here to inline the Goal.

`foldl(Goal,[a,b,c,d],Starter,Out)` perfoms the following in "data flow" notation:

==
Starter -->--Goal-->--Goal-->--Goal-->--Goal-->--Out
              |        |        |        | 
              a        b        c        d
==

with the above image, if you name the arguments for your `Goal`

==
Goal(Element,FromLeft,ToRight)
==

it becomes rather clear what's going on.

Thus, with [`library(yall)`](https://www.swi-prolog.org/pldoc/man?section=yall)

==
?- foldl([Element,FromLeft,ToRight]>>atom_concat(FromLeft,Element,ToRight),[a,b,c,d],'Begin:',Out).
Out = 'Begin:abcd'.
==

and in particular with the empty input list:

==
?- foldl([Element,FromLeft,ToRight]>>atom_concat(FromLeft,Element,ToRight),[],'Begin:',Out).
Out = 'Begin:'.
==

or, exactly the same:

==
mygoal(Element,FromLeft,ToRight) :- atom_concat(FromLeft,Element,ToRight).

?- foldl(mygoal,[a,b,c,d],'Begin:',Out).
Out = 'Begin:abcd'.
==

## Another example

Creating a list of integers 0..5:

==
?- 
   length(List,6),  % create a list of 6 fresh variables
   foldl(
      [Element,FromLeft,ToRight]
         >>(succ(FromLeft,ToRight),Element=FromLeft),
      List,0,_Out).

List = [0, 1, 2, 3, 4, 5],
_Out = 6.
==

well, in this case it's still easier to just do

==
?- bagof(X,between(0,5,X),List).
List = [0, 1, 2, 3, 4, 5].
==

## Another example

If you have a list containing atoms `true` and `false`, check whether it contains only `true`:

==
andify_rightwards(true,true,true).
andify_rightwards(true,false,false).
andify_rightwards(false,true,false).
andify_rightwards(false,false,false).

all_true(List) :-
    foldl([E,FromLeft,ToRight]>>once(andify_rightwards(FromLeft,E,ToRight)),List,true,Out),
   Out == true.
==

Check whether it contains only `false`:

==
andify_negation_rightwards(true,false,true).
andify_negation_rightwards(true,true,false).
andify_negation_rightwards(false,true,false).
andify_negation_rightwards(false,false,false).

all_false(List) :-
   foldl([E,FromLeft,ToRight]>>once(andify_negation_rightwards(FromLeft,E,ToRight)),List,true,Out),
   Out == true.
==

Simple!

## Long-ish Explainer

I had some fun explaining and writing a =foldl/4= and =foldr/4=, complete with test cases.

A markdown page with lots of text, implementations and unit tests is here: 

[**Linear `foldl` and `foldr` in Prolog**](https://github.com/dtonhofer/prolog_notes/tree/master/other_notes/about_foldl_and_foldr)

Directly from that page, the implementation of `foldr` on a list (missing in library(apply)):

==
foo_foldr(Foldy,[Item|Items],Starter,AccUp) :-    % case of nonempty list
   !,                                             % GREEN CUT for determinism
   foo_foldr(Foldy,Items,Starter,AccUpPrev),
   call(Foldy,Item,AccUpPrev,AccUp).

foo_foldr(_,[],Starter,AccUp) :-                  % empty list: bounce Starter "upwards" into AccUp
   AccUp=Starter.                                 % unification not in head for clarity
==


This also includes a (completely pointless) implementation of =foldl/4= based on =maplist/5=. 

Also good to peruse: The Wikipedia entry on "linear folds": https://en.wikipedia.org/wiki/Fold_(higher-order_function)#Linear_folds

## Naming

Note that V0 is an "accumulator", transformed as the iteration over the list proceeds, eventually appearing in its final 

A more general case would be "multi-accumulator":

==
foldl(:Goal, +List, +V0, -V, +W0, -W, +K0, -K)
==

One can of course pack the multiple accumulators into a single one.

