***
*** This text is in the comment section of https://eu.swi-prolog.org/pldoc/doc_for?object=(-%3E)/2
***

## Naming

Do not call this construct an "implication". It really has little to do with [material implication](https://en.wikipedia.org/wiki/Material_conditional) (which is given by `:-` of course). It's just a Prolog control construct. Apparently it is called "soft cut". 

"Arrow" is already [used for something else](https://en.wikipedia.org/wiki/Arrow_%28computer_science%29) but why not.

## Complex code

Code using `->` becomes rapidly hard-to-read if the predicate is "large" and has imbricated `->`. [Minimize Nesting](https://en.wikibooks.org/wiki/Computer_Programming/Coding_Style/Minimize_nesting)!. 

Example from the file jpl.pl of the Java Language Interface:

==
jpl_type_to_class(T, RefA) :-
    (   ground(T)
        ->  (   jpl_class_tag_type_cache(RefB, T)
            ->  true
            ;   (   jpl_type_to_findclassname(T, FCN)
                ->  jFindClass(FCN, RefB),
                    jpl_cache_type_of_ref(class([java,lang],['Class']), RefB)
                ),
                jpl_assert(jpl_class_tag_type_cache(RefB,T))
            ),
            RefA = RefB
    ;   throw_instantiation_error(jpl_type_to_class/2,es01)
    ).
==    

Maybe use a helper meta-predicate. See [if(:If, :Then, :Else)](https://www.swi-prolog.org/pldoc/doc_for?object=sicstus:if/3) from SICStus Prolog.

A similar approach is described in the paper [Indexing `dif/2`](https://arxiv.org/abs/1607.01590) and in Ulrich Neumerkel's reification library [`reif.pl`](http://www.complang.tuwien.ac.at/ulrich/Prolog-inedit/swi/reif.pl).

Here are hand-coded predicates, which are relatively slow:

```
if_then_else(Condition,Then,Else) :- 
   call(Condition) -> call(Then) ; call(Else).

if_then(Condition,Then) :- 
   call(Condition) -> call(Then) ; true.

unless(Condition,Then) :- 
   call(Condition) -> true ; call(Then).
```

For example:

```
tryit(X) :- if_then((X > 0),(format("Yes, X is > 0: ~q\n",[X]))).

?- tryit(10).
Yes, X is > 0: 10
true.

?- tryit(-1).
true.
```

Similarly, for a switch statement which is error-prone (see below), one could use:

==
switch(If1,Then1,If2,Then2,If3,Then3,Else) :-
   call(If1)
   ->  call(Then1)
   ;   call(If2)
   ->  call(Then2)
   ;   call(If3)
   ->  call(Then3)
   ;   call(Else).
==

An example call might be:

==
switch(
    (PatchColFin < StrInLen),
     patched_string_with_suffix(StrIn,PatchStr,PatchCol,PatchColFin,StrOut),
    (PatchCol < StrInLen),
     patched_string_without_suffix(StrIn,PatchStr,PatchCol,StrOut),
    (StrInLen =< PatchCo),
     patched_string_append(StrIn,StrInLen,PatchStr,PatchCol,StrOut),
    cannot_happen_error("impossible case")).
==

## Switch statement based on ->

Consider the expression:

==
test1(A) -> exec1(A,B);
test2(A) -> exec2(A,B);
else(A,B)
==

better written

==
test1(A) 
-> exec1(A,B)
;  test2(A)
-> exec2(A,B)
;  else(A,B)
==

Is this the correct way to write a switch statement or do we need to add parentheses? Yes it is and no we don't.
    
Here is how the expression is parsed:

==
Ex=(test1(A) -> exec1(A,B);
    test2(A) -> exec2(A,B);
    else(A,B)), 
write_canonical(Ex).
==

write_canonical/1 prints:

== 
;(->(test1(A),exec1(A,B)),;(->(test2(A),exec2(A,B)),else(A,B)))
==

Graphically (by hand):

==              
            ┌─────── test1(A)    
    ┌─── -> ┤  
    │       └─────── exec1(A,B)
 ; ─┤
    │              ┌──────── test2(A)
    │      ┌─── -> ┤  
    │      │       └──────── exec2(A,B)
    └─── ; ┤              
           └──── else(A,B)
==

Note that the "principal functor" of the if-then-else is `;` and not `->`.

Anyway, that's how the expression **looks**, but that's not **how it is traversed** (that is what is meant by _the combined semantics of this syntactic construct as defined above is different from the simple nesting of the two individual constructs_ )

Testing the evaluation:

==
mt(C) :-           
   test1(C) -> exec1(C);
   test2(C) -> exec2(C);
   else(C).
                  
test1(C) :- member(t1,C),  !,format("test1: succ\n").
test1(C) :- \+member(t1,C),!,format("test1: fail\n"),false.

test2(C) :- member(t2,C),  !,format("test2: succ\n").
test2(C) :- \+member(t2,C),!,format("test2: fail\n"),false.

exec1(C) :- member(e1,C),  !,format("exec1: succ\n").
exec1(C) :- \+member(e1,C),!,format("exec1: fail\n"),false.

exec2(C) :- member(e2,C),  !,format("exec2: succ\n").
exec2(C) :- \+member(e2,C),!,format("exec2: fail\n"),false.

else(C)  :- member(el,C),  !,format("else: succ\n").
else(C)  :- \+member(el,C),!,format("else: fail\n"),false.
==

==
% every test fails, then else is called (and succeeds)
?- mt([e1,e2,el]).
test1: fail
test2: fail
else: succ
true.
==

==
% test 2 succeeds, then exec2 is called (and succeeds)
?- mt([t2,e1,e2,el]).
test1: fail
test2: succ
exec2: succ
true.
==

==
% test 1 succeeds, then exec1 is called (and succeeds)
?- mt([t1,e1,e2,el]).
test1: succ
exec1: succ
true.
==

## -> on the Prolog Toplevel

Note that you can use ->/2 on the Prolog Toplevel, like any operator. (This is far from asking whether a Horn clause is implied by the program though, just a control construct)

==
a(1).
b(10).
b(11).
c(100).
c(101).
==

==
?- a(X) -> b(Y).
X = 1,
Y = 10 ;
X = 1,
Y = 11.
==

But also:

==
a(1).
a(2).
b(1).
==

==
?- a(X) -> b(X).
X = 1.
==

**THE GOD OF LOGIC IS DISPLEASED** because logically `a(X) -> b(X)` should respond false: `a(2)` is TRUE but `b(2)` is FALSE. But `a(X) -> b(X)` is a control construct, not a sentence with an implication that should be proved. 

## Making a goal deterministic with ->

The "premiss" of ->/2 is not subject to backtracking. This can be advantageous if you want to suppress multiple answer. Alternatively (and IMHO far more clear for the next one who reads your code), you could use once/1.

==
?- member(X,[1,2,3]) -> (write("yes")) ; true.
yes
X = 1.
==

The "conclusion" is still subject to backtracking:

==
?- member(X,[1,2,3]) -> (write("yes");write("yeah")) ; true.
yes
X = 1 ;
yeah
X = 1.
==

Another example showing that Prolog cuts at first success in the premiss but backtracks in the consequent:

```
:- debug(imp).

cond(A,B) :-
   (linked(A,B) -> R=true ; R=false),
   debug(imp,"cond(~q,~q)? ~q",[A,B,R]),
   call(R).

conseq(A,B) :-
   (also_linked(A,B) -> R=true ; R=false),
   debug(imp,"conseq(~q,~q)? ~q",[A,B,R]),
   call(R).

linked(foo,bar).
also_linked(1,2).

do(X,Y,V,W) :-
   (cond(X,Y);cond(Y,X)) -> (conseq(V,W);conseq(W,V)). 
```

Running this:

```
?-  do(foo,bar,1,2).
% cond(foo,bar)? true
% conseq(1,2)? true
true ;
% conseq(2,1)? false
false.

?- do(foo,bar,2,1).
% cond(foo,bar)? true
% conseq(2,1)? false
% conseq(1,2)? true
true.

?- do(bar,foo,1,2).
% cond(bar,foo)? false
% cond(foo,bar)? true
% conseq(1,2)? true
true ;
% conseq(2,1)? false
false.

?- do(bar,foo,2,1).
% cond(bar,foo)? false
% cond(foo,bar)? true
% conseq(2,1)? false
% conseq(1,2)? true
true.
```

## Use -> for guard expressions

To perform tests immediately after the head, in case the head is not discriminatory enough:

```
choo(X) :- var(X)    -> (!,debug(choo,"It's a var",[])).
choo(X) :- nonvar(X) -> debug(choo,"It's not a var",[]).
```
