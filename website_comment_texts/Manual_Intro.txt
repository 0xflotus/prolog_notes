https://eu.swi-prolog.org/pldoc/doc_for?object=manual

#### SWI-Prolog Wiki entry

There is a [wiki entry at the SWI-Prolog Discourse Group](https://swi-prolog.discourse.group/t/useful-prolog-references/1089) with a lot of links.

#### Gentle introduction

**A paper describing SWI-Prolog in general**: [An Overview of the SWI-Prolog Programming Environment](https://www.researchgate.net/publication/220933774_An_Overview_of_the_SWI-Prolog_Programming_Environment/) (January 2003)

**Learn Prolog Now** by Patrick Blackburn, Johan Bos, and Kristina Striegnitz. Available in book form since 2006, too. 

In English and French (" _Prolog tout de suite_ " ... but everybody in the office wanted Java)

  - [Learn Prolog Now](http://www.learnprolognow.org/)
  - [Special version for SWI-Prolog which integrates with SWISH](http://lpn.swi-prolog.org/lpnpage.php?pageid=online), also in the "Tutorials" menu at the top of this page.

**From the book "Language Processing with Perl and Prolog"**

[An Introduction to Prolog](https://link.springer.com/content/pdf/bbm%3A978-3-642-41464-0%2F1.pdf)

**The Power of Prolog** on YouTube is a series of excellent presentations by Markus Triska

  - [Channel](https://www.youtube.com/channel/UCFFeNyzCEQDS4KCecugmotg)
  - To kick off, "Logical Foundations of Prolog":
     - [Logic](https://www.youtube.com/watch?v=nlTZQ0FF2Eo)
     - [Predicate Logic](https://www.youtube.com/watch?v=PCO3lzGfU90)
     - [Horn Clauses](https://www.youtube.com/watch?v=hgw59_HBU2A)

The **Stanford Encyclopedia of Philosophy** is hard to beat:

  - [Classical Logic](https://plato.stanford.edu/entries/logic-classical/)
  - [Automated Reasoning](https://plato.stanford.edu/entries/reasoning-automated/)
  - ...and thereunder [Logic Programming](https://plato.stanford.edu/entries/reasoning-automated/#LogPro)
  - The entry on [Logic and AI](https://plato.stanford.edu/entries/logic-ai/)

If you are good at theory (Mind Blown!)

  - [Frank Pfenning's Course on Logic Programming](http://www.cs.cmu.edu/~fp/courses/lp/)

(Btw Frank Pfenning edited the collection [Types in Logic Programming](https://mitpress.mit.edu/books/types-logic-programming) back in '92. We still don't have (static/strong) types in logic programming .. except in [Mercury](https://en.wikipedia.org/wiki/Mercury_%28programming_language%29))

### SWISH: Online SWI-Prolog

Want to code now? 

Use [SWISH](https://swish.swi-prolog.org/) (SWI-Prolog for Sharing) for experimentation. It's (subset of) SWI-Prolog on a server, accessed via your browser.

   - You can create programs and run queries against them.
   - You can create "notebooks" of code and query

Be sure to read the Help and Examples menus.

### Unit testing

It's dangerous to go alone! Take this: 

[`plunit` testing framework](https://eu.swi-prolog.org/pldoc/doc_for?object=section%28%27packages/plunit.html%27%29)

Unit testing is less about testing than about proper and manageable coding - it's like having a lab notebook. Don't even try to do without. Especially not in Prolog, which has no guardrails at all. You will be surprised at what your tests tell you.

### Prolog Visualizer

Prolog visualizer created by Zhixuan Lai and Alessandro Warth at CDG labs LA; shows what's going on more clearly than a debugger.

   - http://www.cdglabs.org/prolog/#/ (See its (i) menu)
   - [Presentation at Slideshare](https://www.slideshare.net/ZhixuanLai/prolog-visualizer)

### Coding guidelines, style tips

   - [Coding Guidelines for Prolog](https://arxiv.org/abs/0911.2899) (PDF) by Michael Covington et al. (this should be in an open HTML document, not buried in a PDF).
   - [Prolog Coding Horror(s)](https://www.metalevel.at/prolog/horror)

You also should get into **writing good comments**. There is **markup** for this:

  - [PlDoc markup explained](https://www.swi-prolog.org/PlDoc.txt)
  - [PlDoc: Wiki style Literate Programming for Prolog](https://www.swi-prolog.org/download/publications/pldoc.pdf) (PDF)

This comment section also uses PlDoc markup.

### Some basic lingo

  - SWI-Prolog's [own glossary](https://www.swi-prolog.org/pldoc/man?section=glossary)
  - This question on StackOverflow: [Is this Prolog terminology correct? (fact, rule, procedure, predicate, …)](https://stackoverflow.com/questions/49898738/is-this-prolog-terminology-correct-fact-rule-procedure-predicate)
  - ["The Prolog Dictionary" by Bill Wilson](http://www.cse.unsw.edu.au/~billw/prologdict.html)
  - My certainly less-than perfect [writeup of the "Byrd Box Model"](https://github.com/dtonhofer/prolog_notes/tree/master/other_notes/about_byrd_box_model)

### Discussion Groups

  - [The "Prolog" tag at **StackOverflow**](https://stackoverflow.com/tags/prolog/info) - but please search for answer to your potential question first. Interesting and well-formulated questions only pop up rarely though.
  - [The SWI-Prolog group](https://swi-prolog.discourse.group/) at [Discourse](https://en.wikipedia.org/wiki/Discourse_%28software%29)

### Pages listing resources

**In this manual**

  - [SWI-Prolog manual's list of materials](https://www.swi-prolog.org/Links.txt)
  - [SWI-Prolog manual's list of publications](https://www.swi-prolog.org/Publications.html)
  - There is the [bibliography](https://www.swi-prolog.org/pldoc/man?section=bibliography), but it's not so helpful
   - More info than one can handle at [Robert Kowalski's Homepage](https://www.doc.ic.ac.uk/~rak/)

**Others**

  - The aformentioned [Prolog tag at StackOverflow](https://stackoverflow.com/tags/prolog/info)
  - Metalevel.at Prolog FAQ [here](https://www.metalevel.at/prolog/faq/faq.html) and [here](https://www.metalevel.at/prolog/faq/)
  - A [page at GitHub](https://github.com/klaussinani/awesome-prolog#resources)
  - The tail end of [Wikipedia page for _Prolog_](https://en.wikipedia.org/wiki/Prolog)
  - Also this: [Comparison of Prolog Implementations](https://en.wikipedia.org/wiki/Comparison_of_Prolog_implementations)
 
### Code examples

  - [The "Prolog" category at *Rosettacode*](http://rosettacode.org/wiki/Category:Prolog)
  - [*99 Prolog Problems*](https://www.ic.unicamp.br/~meidanis/courses/mc336/2009s2/prolog/problemas/) (the Swiss page at BFH.ch is down)

### Definite Clause Grammars (DCGs)

Markus Triska writes in his DCG tutorial:

==
Consider using DCGs if you are:

  - describing a list
  - reading from a file
  - passing around a state representation that only a few predicates
    actually use or modify.

In every serious Prolog program, you will find many opportunities to use DCGs
due to some subset of the above reasons.
==

In this manual:

  - [The section on DCGs](https://www.swi-prolog.org/pldoc/man?section=DCG)

Introduction and tutorials:

  - [By Markus Triska](https://www.metalevel.at/prolog/dcg)
  - [By Anne Ogborn](http://www.pathwayslms.com/swipltuts/dcg)
  - [Wikipedia on DCGs](https://en.wikipedia.org/wiki/Definite_clause_grammar) (has further references)

Also take a look at: 

  - [Wikipedia on Attribute Grammars](https://en.wikipedia.org/wiki/Attribute_grammar)

### "Difference lists"

The usage of "difference list" is not entirely clear:

This is about working at the end of a list terminating not in [] but in an unbound variable (aka. "an open list") for efficient append operations...

  - [Difference list wiki entry](https://swi-prolog.discourse.group/t/difference-list/959) at SWI-Prolog discourse site.
  - Frank Pfenning on [Difference Lists](https://www.cs.cmu.edu/~fp/courses/lp/lectures/11-diff.pdf) (PDF)

Or it is about "a list described by a pair of lists", where all the lists are proper (not-open) lists, in particular in the context of DCGs:

  - The application of [Difference Lists to DCGs](https://www.metalevel.at/prolog/dcg) by Markus Triska. There are called (appropriately) "list differences"

==
In the literature, you will also encounter the term "difference list". However,
this terminology is misleading: We are not talking about — as the name may suggest
— a special kind of list. The additional arguments are completely ordinary lists.
It is their differences that matter especially in such cases.
==

One will have to live with this ambiguity.

  - My own explainer: [About difference lists](https://github.com/dtonhofer/prolog_notes/tree/master/swipl_notes/about_difference_lists)

### Constraint Logic Programming (CLP)

Start at [the manual page for CLP](https://www.swi-prolog.org/pldoc/man?section=clp).

Quickly get used to using numeric constraints to express relationships between integers, instead of performing function evaluation on the right with =is= : [manual page for CLP(FD)](https://www.swi-prolog.org/pldoc/man?section=clpfd)

### Constraint Handling Rules (CHRs)

This is a formalism for writing forward-chaining rewrite rules on top of Prolog. One should at least be aware that these exist so that one can use them when appropriate.

   - [The manual page on CHRs](https://www.swi-prolog.org/pldoc/man?section=chr)
   - [Wikipedia on CHR](https://en.wikipedia.org/wiki/Constraint_Handling_Rules)

### Theorem proving

Prolog is for programming (search-augmented programming) using a certain formalism from logic, rather than for theorem proving. One can build a theorem prover on top of it, however, for theorem proving, look at things like:

  - Wikipedia on [Vampire](https://en.wikipedia.org/wiki/Vampire_%28theorem_prover%29)
  - Wikipedia on [Isabelle](https://en.wikipedia.org/wiki/Isabelle_%28proof_assistant%29)
  - Wikipedia on [Coq](https://en.wikipedia.org/wiki/Coq)
  - Wikipedia on [LEAN](https://en.wikipedia.org/wiki/Lean_%28proof_assistant%29)

Here is a paper on a simple FOL prover in Prolog

  - [leanTAP: Lean Tableau-based Deduction (1995)](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.28.5925)

### History of Prolog

  - [*Prolog Héritage*: The Prologs from Marseille](http://prolog-heritage.org/)
  - Robert Kowalski's 2014 paper [History of Logic Programming](https://www.researchgate.net/publication/277670164_History_of_Logic_Programming). I would say it's actually the "Prehistory" because modern approaches have not yet made it into the paper. 
  - Alain Colmerauer and Philippe Roussel: [The birth of Prolog](http://alain.colmerauer.free.fr/alcol/ArchivesPublications/PrologHistory/19november92.pdf) (November 1992).
  - Peter Van Roy's 1993 overview [1983--1993: The Wonder Years of Sequential Prolog Implementation](https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.29.9583) ...  _This report surveys the major developments in sequential Prolog implementation during the period 1983--1993. In this decade, implementation technology has matured to such a degree that Prolog has left the university and become useful in industry._ 
  - Robert Kowalski's 1988 paper [The Early Years of Logic Programming](https://www.doc.ic.ac.uk/~rak/papers/the%20early%20years.pdf), which appeared in a "Communications of the ACM" special issue (January '88: https://cacm.acm.org/magazines/1988/1 ) 
  - If you are writing a paper for, say, the _IEEE Annals of the History of Computing_, there is a lot of further pointers here: http://www.softwarepreservation.org/projects/prolog/

### Books on Thinking, Logic & Computation

On the [SWI-Prolog bibliography page](https://eu.swi-prolog.org/pldoc/man?section=bibliography) a commenter mentions this book:

*Thinking as Computation: A First Course* _by [Hector J. Levesque](https://en.wikipedia.org/wiki/Hector_Levesque), 2012_

   - [Reference at MIT Press](https://mitpress.mit.edu/books/thinking-computation)

---

*Simply Logical: Intelligent Reasoning by Example* _by [Peter Flach](http://people.cs.bris.ac.uk/~flach/), 1994_

Available online:

   - [Book website](http://book.simply-logical.space/)
   - [The author's website](http://people.cs.bris.ac.uk/~flach/SimplyLogical.html)

---

*Computational Logic and Human Thinking - How to Be Artificially Intelligent* _by [Robert Kowalski](https://en.wikipedia.org/wiki/Robert_Kowalski), 2011_

   - [Cambridge University Press reference](https://www.cambridge.org/core/books/computational-logic-and-human-thinking/C2AFB0483D922944067DBC76FFFEB295)
   - [Preprint available at the author's website](https://www.doc.ic.ac.uk/~rak/papers/newbook.pdf) (PDF)

### Natural Language Processing

Specifically for Natural Language Processing, there are tons of resources. 

Although, just by looking at manning.com, what's done today for actual NLP is done in Python wrapping Tensorflow libraries to hoover Twitter feeds for sentiment analysis to predict political trends.

Start with an *overview* at the Stanford Encyclopedia of Philosophy: [Computational Linguistics](https://plato.stanford.edu/entries/computational-linguistics/)

In a recent (heavy) textbook: 

**Introduction to Natural Language Processing** 

_by Jacob Eisenstein, 2019_

[Reference at MIT Press](https://mitpress.mit.edu/books/introduction-natural-language-processing)

the author goes far beyond "NLP and Parsing" (indeed the part on Formal Language Theory, Context-Free Parsing, Dependency Parsing is only 80 pages of 450) and throws statistics and neural networks at the problem.

Prolog related works by reverse year of publication:

----
**An Introduction to Language Processing with Perl and Prolog** by Pierre M. Nugues, 2nd edition, 2014

[Reference at Springer](https://link.springer.com/book/10.1007%2F3-540-34336-9)

*"An Outline of Theories, Implementation, and Application with Special Consideration of English, French, and German"*

Contains an intro to Prolog, specifically SWI-Prolog.

----
**Natural Language Processing Techniques in Prolog** by Patrick Blackburn and Kristina Striegnitz, 2002

[available here](http://cs.union.edu/~striegnk/courses/nlp-with-prolog/html/index.html)

----

**Prolog and Natural-Language Analysis** by Fernando C. N. Pereira and Stuart M. Shieber, (Original 1987, Millenial reissue 2002)

[PDF here](http://www.mtome.com/Publications/PNLA/prolog-digital.pdf)

### Furthermore

I liked the view on basic logic programming from the LISP side. This is the basis of Kanren and miniKanren:

   - **The Reasoned Schemer** _by Daniel P. Friedman, William E. Byrd and Oleg Kiselyov, 2005-10_
   - [Reference at MIT Press](https://mitpress.mit.edu/books/reasoned-schemer)

A thin book (but pricey).

(The blurb saying "Friedman and Kiselyov extend Scheme to form a completely new kind of logic programming system, one which is in many ways even more elegant than Prolog." I don't know about that.)

---

A fascinating page on a fascinating site, by Oleg Kiselyov (must have reached at least Spock level): 

   - http://okmij.org/ftp/Prolog/
   - http://okmij.org/ftp/kakuritu/logic-programming.html

### Last but not least

A recent overview textbook by ACM Books:

   - **Declarative Logic Programming: Theory, Systems, and Applications** _Editors: Michael Kifer & Yanhongannie Liu, 2018-09_
   - [Reference & chapter list at ACM](https://dl.acm.org/doi/book/10.1145/3191315)
