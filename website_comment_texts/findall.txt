## Success if no solution

As the description says, unlike bagof/3 and setof/3, findall/3 succeeds with an empty =Bag= if there are no solutions:

If we have the database

==
g(b,1).
==

then

==
?- bagof(X,g(a,X),Bag).
false.
==

but

==
?- findall(X,g(a,X),Bag).
Bag = [].
==

## findall will always generate all solutions of subgoal, whether =Bag= fits or not

Generally one passes a =Bag= that is an unbound variable. findall/3 will then unify =Bag= with the list of solutions collected:

==
?- findall(X,(between(0,4,X),format("Found ~q\n",[X])),Bag).
Found 0
Found 1
Found 2
Found 3
Found 4
Bag = [0, 1, 2, 3, 4].
==

findall/3, similar to bagof/3 and setof/3 **is not** limited by any initially set length of =Bag=. In fact, it probably/definitely collects a solution list first, then unifies it with =Bag=. If this fails, the findall/3 call fails. 

Here we give it a =Bag= of 10 unbound variables to fill with a =Goal= that redoes forever. findall/3 does not care and goes on ... forever! Even thought it has the information that it could stop at the 11th solution.

==
?- length(Bag,10), findall(X,between(0,inf,X),Bag).
ERROR: Stack limit (1.0Gb) exceeded
==

On the other hand, if =Bag= is too small or too large, findall/3 will collect all subgoal solutions, and then fail at unifying those with =Bag=:

==
?- length(SmallBag,3),findall(X,(between(0,4,X),format("Found ~q\n",[X])),SmallBag).
Found 0
Found 1
Found 2
Found 3
Found 4
false.

?- length(LargeBag,10),findall(X,(between(0,4,X),format("Found ~q\n",[X])),LargeBag).
Found 0
Found 1
Found 2
Found 3
Found 4
false.
==

The above also applies to bagof/3 and setof/3

There is space in the market for a findall_cautious/3 which checks on each call to =Goal= whether it will be able to unify the new element with the current position in =Bag= and thus is able to fail early (due to =Bag= running out of space or having a value at some position that does not unify). In fact, there could even be a findall_overflow/4 which generates a [Continuation](https://eu.swi-prolog.org/pldoc/man?section=delcont) that can be called for more solutions if the =Bag= turns out to be too small.

## Edge case

Edge case: findall/3 accepts a non-list =Bag= instead of throwing a type error. Might be useful to fix that. In the first case below, the unification fails trivially, in the second, it loops forever:

==
?- length(L,5),findall(X,between(0,4,X),1).
false.

?- findall(X,between(0,inf,X),1).
ERROR: Stack limit (1.0Gb) exceeded
==

## No caret syntax to "shield off" variables

findall/3 does not have a special syntax to indicate which variables in =Goal= should be "shielded off" (existentially quantified) from anything outside =Goal=. 

With the database

==
f(a,1).
f(b,1).
f(c,2).
f(d,2).
==

First instantiation of f(X,Y) fixes =Y= to 1. Then bagof/3 runs to completion. The the whole toplevel goal succeeds and backtracks. The the second instantiation of f(X,Y) fixes =Y= to 2:

==
?- bagof(X,f(X,Y),Bag).
Y = 1,
Bag = [a, b] ;
Y = 2,
Bag = [c, d].
==

Tell bagof/3 to internally backtrack over Y, "existentially qualifying Y" or shielding it off from outside of the bagof/3 call:

==
?- bagof(X,Y^f(X,Y),Bag).
Bag = [a, b, c, d].
==

which is the same as

==
bagit(X) :- f(X,_).

?- bagof(X,bagit(X),Bag).
Bag = [a, b, c, d].
==

With findall/3, one gets only the "existentially qualifying" behaviour:

==
?- findall(X,f(X,Y),Bag).
Bag = [a, b, c, d].
==

If Y is instantiated from outside the call, they behave the same:

==
?- Y=2,findall(X,f(X,Y),Bag).
Y = 2,
Bag = [c, d].

?- Y=2,bagof(X,Y^f(X,Y),Bag).
Y = 2,
Bag = [c, d].

?- Y=2,bagof(X,f(X,Y),Bag).
Y = 2,
Bag = [c, d].
==

The feel when -- one gets the impression some proper syntax is missing.

## Bad style

Writing

==
?- findall(X,member(X,[1,2,3]),X).
X = [1, 2, 3].
==

is allowed but bad style. The same variable name `X` appears in two distinct roles, in two distinct context. Namely:

==
findall( { thereis X : member(X,[1,2,3]) } , X )
== 

This should be caught by a Prolog code linter.

Jan writes:

"It is just that findall/3 first uses the first argument and the goal, backtracking over all solutions. In the end, the first argument is unchanged (i.e., still a variable if it was one to begin with) and thus we can reuse it for the second stage (collecting the answers). It is not wrong. It should be considered bad style. Not much different that reusing a variable in imperative coding for two totally different purposes instead of introducing a new variable and assume that the compiler reuses the same location if the scopes do not overlap (and even if not, the damage is really small). So yes, a linter issue."
 
