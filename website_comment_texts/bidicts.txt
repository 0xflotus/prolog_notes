https://eu.swi-prolog.org/pldoc/man?section=bidicts

## Helper library

There is an additional 

[library(dicts)](https://eu.swi-prolog.org/pldoc/man?section=dicts)

"This library defines utilities that operate on lists of dicts, notably to make lists of dicts consistent by adding missing keys, converting between lists of compounds and lists of dicts, joining and slicing lists of dicts."

## What

   - Dicts are opaque structures composed of a **tag** and 0..N **key-value pairs** where the keys are unique and must be an atom or a "small integer". The tag, however, can be anything, even a fresh variable ("anonymous dict").
   - Unification of Dicts means unification of tags, same set of keys, and unification of values (at least that's the current approach).
   - Unification being well defined, dicts can appear in clause heads in particular.
   - This is equivalent of (say) Clojure maps or Perl hashes. 

## dot-calls involving dicts

"Function calls associated to a dict" are detected when the ./2 notation appears (we could thus call those calls "dot calls").  
The dot call is replaced by the method-returned term (which may in particular be a dict or a uninstantiated term).

With the provided dot calls and some additional conventions, one may be able to use them as objects for [Prototype-based Object Orientation](https://en.wikipedia.org/wiki/Prototype-based_programming). 

Dicts can also replace the nonlocal and convention-based "list" structure `[a,b,c]` by a local/enforced "dict" structure `_{0:a,1:b,2:c}` (but compound terms can do that, too - in fact if you need
large direct-access array structures, use compound terms to represent them)

### ...Predefined dot-calls

There is nothing special about those.

The following [predefined ones exist](https://eu.swi-prolog.org/pldoc/man?section=ext-dicts-predefined):

   - .get(?Key)  (throws if key does not exist)
   - .put(+NewKeyValuePairs)  (evaluates to a new dict with additions/replacements, the method counterpart of put_dict/3; NewKeyValuePairs can take one of several different forms)
   - .put(+KeyPath, +Value)  (evaluates to a new dict with single addition/replacement, where one can specify a path through nested dicts; the method counterpart of put_dict/4)

### ...User-defined dot-calls

These are always associated to dicts with defined tag name. This is also the name of the module hosting the dot-calls.

You must define a separate module file to host the method code for the given dict tag. The name of the module file does not need to match the name of the module though (so you can name it "module_point.pl" for example)

Example as used in the text above: Module "point" matches dict tag "point". Note that the module/2 directive declares that no predicate is being exported!

==
:- module(point, [point_length/2]).

M.multiply(F)                           % Method ".multiply/1" on dict M
   := point{x:X, y:Y}                   % Returns a "point" dict
   :- X is M.x*F, Y is M.y*F.           % Body where dict M is accessible 

M.len()                                 % Method ".len/0" on dict M
   := Len                               % Returns a "Len" value (a number, actually)
   :- Len is sqrt(M.x**2 + M.y**2),     % Body where dict M is accessible
      debug("pointlength_method","~q.len() = ~q",[M,Len]).
      
point_length(point{x:X,y:Y},Len) :-    
   Len is sqrt(X**2 + Y**2),
   debug("pointlength_predicate","point{x:~q,y:~q} = ~q",[X,Y,Len]).
==

After loading the above:

==
?- X = point{x:12,y:13}.multiply(12).
X = point{x:144, y:156}.
==

We are still not in functional territory. You **must enter a goal** (above, a goal involving unification). Just entering the method call won't do:

==
?- point{x:12,y:13}.multiply(12).
ERROR: Unknown procedure: ('.')/2
ERROR:     However, there are definitions for:
ERROR:         ('.')/3
false.
==

Let's backtrack over a dot call:

==
?- debug("pointlength_method").
true.

?- between(1,5,Y),L=point{x:1,y:Y}.len(),fail.
% point{x:1,y:1}.len() = 1.4142135623730951
% point{x:1,y:2}.len() = 2.23606797749979
% point{x:1,y:3}.len() = 3.1622776601683795
% point{x:1,y:4}.len() = 4.123105625617661
% point{x:1,y:5}.len() = 5.0990195135927845
false.
==

## Predicate calls involving dicts

   - is_dict/1, is_dict/2 : check for dicty-ness, possibly unifying tag, too
   - get_dict/3 : Same as .get/1  dot-call but fails if key does not exist
   - get_dict_ex/3 : Same as .get/1 dot-call; throws if key does not exist
   - get_dict/5 : Combined get/put, should be called **fork_dict/5** 
   - dict_create/3 : Assemble a Dict from a tag and "several possible forms of list"
   - dict_pairs/3 : Assemble/Disassemble a Dict from/to a tag and a key-value list
   - put_dict/3 : Update a Dict to a new Dict from "several possible forms of list"  ; the predicate counterpart of .put/1
   - put_dict/4 : Update a Dict to a new Dict with single addition/replacement, where one can specify a path through nested dicts; the predicate counterpart of .put/2
   - del_dict/4: Update a Dict to a new Dict with single deletion
   - :</2: "Selection operator" (I prefer "Projection operator"): Project the right-hand dict onto the left-hand dict, unifying the values of common keys (thus either failing or continuing with possibly both dicts involved in the operation further refined). Fails if the left-hand dict has a key that is not in the right-hand dict.
   - select_dict/3: Similar to the "Selection operator", but also retains the "Rest": those Key-Value pairs only present in the right-hand dict.
   - >:</2: "Symmetric selection operator" or "partial unification" (vague) (I prefer "Symmetric projection operator"): Unify the values of common keys, ignoring any other keys, thus either failing or continuing with possibly both dicts involved in the operation further refined.

## Destructive assignment in dicts

[Better use those only rarely](https://eu.swi-prolog.org/pldoc/man?section=ext-dict-assignment)

## Dict equality and unification

When comparing two dicts, you can use:

   - `==`, then the tags must pass `== `, the key sets must be equal and all the key-value pairs must pass `==`
   - `=`,  then the tags must unify, the key sets must be equal and the values must unify for each key

There should be a way to "==" while disregarding the tag. There is not, but you can use this:

==
dict_equality_sans_tag(D1,D2) :-
   ((var(D1);is_dict(D1)) -> true ; type_error("dict or var",D1)),
   ((var(D2);is_dict(D2)) -> true ; type_error("dict or var",D2)),   
   (var(D1);var(D2)) 
   -> false
   ; 
   (assertion((is_dict(D1),is_dict(D2))),
    dict_pairs(D1,_Tag1,Pairs1), % Pairs1 will be ordered by natural order of keys
    dict_pairs(D2,_Tag2,Pairs2), % Pairs2 will be ordered by natural order of keys
    Pairs1 == Pairs2).
==

With the above, some tests:

==        
:- begin_tests(dict_equality).

test("empty dict") :- 
   foo{} == foo{}.
   
test("nonempty dict") :-
   foo{a:x,b:y} == foo{a:x,b:y}.
   
test("nonempty dict arbitrarily ordered") :-
   foo{a:x,b:y,c:z} == foo{c:z,b:y,a:x}.

test("same dict pairs, both tags being the same unbound variable") :-
   X{a:x,b:y,c:z} == X{a:x,b:y,c:z}.

test("dict tag the same unbound variables, pairs with values the same unbound variables") :-
   A{a:X,b:Y,c:Z} == A{a:X,b:Y,c:Z}.
   
test("same dict pairs, different tags") :-
   foo{a:x,b:y,c:z} \== bar{a:x,b:y,c:z}.

test("same dict, one tag an unbound variable") :-
   foo{a:x,b:y,c:z} \== _{a:x,b:y,c:z}.
   
test("different key sets") :-
   foo{a:x,b:y,c:z} \== foo{b:y,c:z,d:q}.

test("different values") :-
   foo{a:x,b:y,c:z} \== foo{a:x,b:y,c:zz}.
   
test("dict equality disregarding the tag (same tag)") :-
   dict_equality_sans_tag(foo{a:x,b:y,c:z},foo{a:x,b:y,c:z}).
   
test("dict equality disregarding the tag (different tag)") :-
   dict_equality_sans_tag(foo{a:x,b:y,c:z},bar{a:x,b:y,c:z}).
      
test("dict equality disregarding the tag (different content #1)", fail) :-
   dict_equality_sans_tag(foo{a:x,b:y,c:z},bar{a:x,b:y,c:zz}).

test("dict equality disregarding the tag (different content #2)", fail) :-
   dict_equality_sans_tag(foo{a:x,b:y,c:z},bar{a:x,c:y,d:z}).
   
:- end_tests(dict_equality).
==


==
:- begin_tests(dict_unification).

test("empty dict") :- 
   foo{} = foo{}.
   
test("nonempty dict") :-
   foo{a:x,b:y} = foo{a:x,b:y}.
   
test("nonempty dict arbitrarily ordered") :-
   foo{a:x,b:y,c:z} = foo{c:z,b:y,a:x}.

test("same dict pairs, tags can unify #1") :-
   _{a:x,b:y,c:z} = _{a:x,b:y,c:z}.

test("same dict pairs, tags can unify #2") :-
   _{a:x,b:y,c:z} = foo{a:x,b:y,c:z}.

test("unifiable, tags and dict values can unify #2") :-
   _{a:_X,b:y,c:_Z,k:K} = foo{a:x,b:y,c:z,k:K}.
      
:- end_tests(dict_unification).
==
 
==
:- begin_tests(dict_pairs).

% Obtain the special blob which is the dict functor name (it cannot be written down)

dict_functor_name(FN) :- compound_name_arity(_{},FN,_).

% This is used to process the special list yielded by compound_name_arguments/3

swappypairzip([V,K|Ms],[K-V|Ps]) :- !,swappypairzip(Ms,Ps).
swappypairzip([],[]).

test("analyze empty dict", true([Name,Pairs] == [foo,[]])) :-
   dict_pairs(foo{},Name,Pairs).

% Pairs list is assumed "ordered" in the next test

test("analyze nonempty dict", true([Name,Pairs] == [foo,[a-x,b-y]])) :-
   dict_pairs(foo{a:x,b:y},Name,Pairs).

% Analyze dict with "compound_name_arguments/3":
% VERY different, much nastier than using dict_pairs

test("analyze empty dict with compound_name_arguments/3",true([Name,DictTag] == [FN,foo])) :-
   dict_functor_name(FN),
   compound_name_arguments(foo{},Name,[DictTag]).

test("analyze nonempty dict with compound_name_arguments/3",true([Name,DictTag,DictContentZippedSorted] == [FN,foo,[a-x,b-y]])) :-
   dict_functor_name(FN),
   compound_name_arguments(foo{a:x,b:y},Name,[DictTag|DictContent]),
   swappypairzip(DictContent,DictContentZipped),       % DictContent has the order of Key, Value reversed!
   keysort(DictContentZipped,DictContentZippedSorted). % and there is no guarantee on order

% Assemble a dict

test("assemble an empty dict",true(Dict == foo{})) :-
   dict_pairs(Dict,foo,[]).

test("assemble a nonempty dict",true(Dict == foo{a:x,b:y,c:z})) :-
   dict_pairs(Dict,foo,[a-x,b-y,c-z]).

test("assemble nonempty dict from differently ordered pairs",true(Dict == foo{a:x,b:y,c:z})) :-
   dict_pairs(Dict,foo,[b-y,a-x,c-z]).

% This throws the non-ISO exception with formal "duplicate_key(Key)"

test("assemble nonempty dict with ambivalent input",error(duplicate_key(a))) :-
   dict_pairs(_,foo,[b-y,a-x,c-z,a-666]).

% Pairs cannot be specified with ":"

test("assemble nonempty dict with pairs that use ':'",error(type_error(_,_))) :-
   dict_pairs(_,foo,[b:y,a:x,c:z]).

:- end_tests(dict_pairs).
==

Ugly disassembly using the basic "compound_name_arguments/3" predicate.
Don't do this, use dict_pairs/3!
Plus, this is not guaranteed to work if a new implementation comes out-

==
:- begin_tests(cna_dict).

dict_functor_name(FN) :- compound_name_arity(_{},FN,_).

test("compound_name_arguments/3 on empty dict", true([Name,Args] == [FN,[alpha]])) :-
   dict_functor_name(FN),
   compound_name_arguments(alpha{},Name,Args).

test("compound_name_arguments/3 on nonempty dict", true([Name,Args] == [FN,[alpha, 1, x, 2, y]])) :-
   dict_functor_name(FN),
   compound_name_arguments(alpha{x:1,y:2},Name,Args).

test("compound_name_arguments/3 on nonempty anonymous dict", true([Name,Args] == [FN,[X, 1, x, 2, y]])) :-
   dict_functor_name(FN),
   compound_name_arguments(_{x:1,y:2},Name,Args),
   Args = [X|_Rest].

:- end_tests(cna_dict).
==
