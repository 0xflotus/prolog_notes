## Works "out of the box"!

As an example, try a few test cases. Consult (using consult/1) the following from SWI-Prolog toplevel:

[`test_jpl.pl`](https://github.com/dtonhofer/prolog_notes/blob/master/swipl_notes/about_jpl/test_jpl.pl)

and run the plunit test cases:

```
?- run_tests.
% PL-Unit: jpl
% Java Version: 14.0.1
...
% Obtained Java GregorianCalendar = <jref>(0x201c060)
% Object is of Class <jref>(0x1ffa300)
% Class <jref>(0x1ffa300) has name 'java.util.GregorianCalendar'
% Class <jref>(0x201bfc8) has name 'java.util.Calendar'
% Class <jref>(0x1fd4718) has name 'java.lang.Object'
... done
% All 6 tests passed
true.
```

## Documentation

A semi-complete diagram I made on [**JPL calling Java and the converse**](https://github.com/dtonhofer/prolog_notes/blob/master/code_jpl/java_classname_dcg_for_jpl/pics/jpl_calling_java_and_the_converse.svg)

A diagram on [**Type Concepts**](https://github.com/dtonhofer/prolog_notes/blob/master/code_jpl/java_classname_dcg_for_jpl/pics/jpl_and_java_type_descriptors.svg) used in JPL, made while refreshing the JPL Prolog-side code showing:

   - **JPL types**, which are Prolog terms describing a Java type ;
   - **Java Entity Names**, which are strings (atoms in JPL) describing a Java type: a reference type (concrete or abstract class or interface), in which case this is the **Java classname**, an array type or a primitive ;
   - **Java Type Descriptors**, which are strings (atoms in JPL) describing a Java type, but slightly differently than for Java Entity Names ;
   - **JNI Findclassname Descriptors**, which are strings (atoms in JPL) given to the JNI function `FindClass` so that it may load/find the corresponding instance of `java.util.Class`
   - **Java Method Descriptors**, which are strings (atoms in JPL) describing a Java Method signature. These are based on Java Type Descriptors.

The current distribution is not yet based on this (soon!).

For a description of the **Entity Name**, see `java.lang.Class.getName()` which returns one of those:

   - [`java.lang.Class.getName()`](https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/lang/Class.html#getName%28%29)

For the **'binary' classname**, i.e. the classname as used in binary files, having package names with "." separators, see:

    - [Java Language Specification: Fully Qualified Names and Canonical Names](https://docs.oracle.com/javase/specs/jls/se14/html/jls-6.html#jls-6.7)

For a description of the descriptors as used by the JNI function `FindClass`, which takes package names with "/" separators, see:

   - [jclass FindClass(JNIEnv *env, const char *name)](https://docs.oracle.com/en/java/javase/14/docs/specs/jni/functions.html#findclass)

## Documentation: JavaDoc

   - [JavaDoc for Java 14](https://download.java.net/java/GA/jdk14/docs/api/index.html)
   - [Oracle Tutorial Java Glossary](https://docs.oracle.com/javase/tutorial/information/glossary.html) (does not contain _Lambda_ yet ... which appeared in Java 8, i.e. 2014 üßê)

## Documentation: JNI

   - [Documentation for JNI in Java 14](https://docs.oracle.com/en/java/javase/14/docs/specs/jni/)
   - There are two old-ish books:
      - "Essential JNI Java Native Interface" by Rob Gordon, Prentice-Hall, 1998
      - "The Java Native Interface, Programmer's Guide and Specification" by Sheng Liang, Addison-Wesley, 1999

1998 is when JDK 1.1 was the current version, Michael Franz of UC Irvine wrote "The JVM: A Passing Fad?" in IEEE Software of Nov/Dec and Harold Lawson wrote "From Busyware to Stableware" in IEEE Software of Oct. But I digress.

## Grouping the JPL predicates

### Create a new instance

   - jpl_new/3

### Call a class or instance method

   - jpl_call/4

### Call a getter/setter or get/set a field member

   - jpl_get/3
   - jpl_set/3

### JVM option handling

   - jpl_get_default_jvm_opts/1
   - jpl_get_actual_jvm_opts/1
   - jpl_set_default_jvm_opts/1

### What syntax are we using Prolog side (when is this used?)

   - jpl_pl_syntax/1

### Version of JPL or the C part

   - jpl_pl_lib_version/1
   - jpl_c_lib_version/1

### Type shuffling

(confusing, needs a little ASCII diagram or something)

   - jpl_class_to_classname/2
   - jpl_classname_to_class/2

   - jpl_class_to_type/2
   - jpl_type_to_class/2

   - jpl_classname_to_type/2
   - jpl_type_to_classname/2

   - jpl_object_to_class/2
   - jpl_object_to_type/2
   - jpl_primitive_type/1
   - jpl_datum_to_type/2

### What do we have here

(Maybe simpler as jpl_is(What,X) ?)

   - jpl_is_false/1
   - jpl_is_true/1
   - jpl_is_null/1
   - jpl_is_void/1
   - jpl_is_class/1
   - jpl_is_object/1
   - jpl_is_object_type/1
   - jpl_is_type/1
   - jpl_is_ref/1
   - and jpl_ref_to_type/2

### Get constants

   - jpl_null/1
   - jpl_false/1
   - jpl_true/1
   - jpl_void/1

### Array handling

   - jpl_array_to_length/2
   - jpl_array_to_list/2
   - jpl_array_to_terms/2
   - jpl_list_to_array/2
   - jpl_datums_to_array/2
   - jpl_terms_to_array/2

### Iterator handling

   - jpl_iterator_element/2

### Examples for servlet tactics

   - jpl_servlet_byref/3
   - jpl_servlet_byval/3

### Set & Map handling

   - jpl_set_element/2
   - jpl_map_element/2
   - jpl_hashtable_pair/2 (anachronistic, Hashtable-specific!)

### Enum handling

   - jpl_enumeration_element/2
   - jpl_enumeration_to_list/2
